<div id="viz"></div>
<script type="module">

    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

    let cat = {
        "objects": [
            <%= [...Array(it.objects).keys()] %>
        ],
        "morphisms": [
            <%
            for (i = it.objects; i < it.morphisms; i++) {
                var dom;
                for (j = 0; j < it.objects; j++) {
                    if (it.table[i][j] < it.morphisms) {
                        dom = j;
                        break;
                    }
                }
                var cod;
                for (j = 0; j < it.objects; j++) {
                    if (it.table[j][i] < it.morphisms) {
                        cod = j;
                        break;
                    }
                }
            %>
            { "source": <%= dom %>, "target": <%= cod %>, "id": <%= i %> },
            <% } %>
        ]
    }

    function arcd(d) {
        var x1 = d.source.x,
            y1 = d.source.y,
            x2 = d.target.x + 1,
            y2 = d.target.y - 1,
            dx = x2 - x1,
            dy = y2 - y1,
            dr = Math.sqrt(dx * dx + dy * dy),
            drx = 20,
            dry = 20,
            xRotation = 20, // degrees
            sweep = 0; // 1 or 0

        return `M ${x1} ${y1} A ${drx} ${dry} ${xRotation} 1 ${sweep} ${x2} ${y2}`;
    }

    // Specify the color scale.
    const color = d3.scaleOrdinal(d3.schemeCategory10);

    const nodes = cat.objects.map(d => ({ "id": d }));

    let non_endos = [];
    let endos = [];
    for (let m of cat.morphisms) {
        let need_new = true;
        if (m.source !== m.target) {
            for (let n of non_endos) {
                if (n.source === m.source && n.target === m.target) {
                    need_new = false;
                    n.members.push(m.id);
                    break;
                }
            }
            if (need_new)
                non_endos.push({ source: m.source, target: m.target, members: [m.id] });
        } else {
            for (let n of endos) {
                if (n.source === m.source) {
                    need_new = false;
                    n.members.push(m.id);
                    break;
                }
            }
            if (need_new)
                endos.push({ source: m.source, target: m.target, members: [m.id] });
        }
    }

    const links = [...endos, ...non_endos];

    const width = d3.select("#viz").node().getBoundingClientRect().width;
    const height = 200;

    const simulation = d3.forceSimulation(nodes)
        .force("link", d3.forceLink(links).id(d => d.id).strength(0.01))
        .force("charge", d3.forceManyBody().strength(-50))
        //.force("y", d3.forceY(height / 2).strength(0.02))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("collide", d3.forceCollide(15))
        .on("tick", ticked);

    const svg = d3.create("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", [0, 0, width, height])
        .attr("style", "max-width: 100%; height: auto;");

    const marker = svg.append("defs")
        .append("marker")
        .attr("id", "arrow")
        .attr("viewBox", "0 0 10 10")
        .attr("refX", 35)
        .attr("refY", 5)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto-start-reverse")
        .append("path")
        .attr("fill", "black")
        .attr("d", 'M 0 0 L 10 5 L 0 10 z');

    const link = svg.append("g")
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .selectAll()
        .data(non_endos)
        .join("g");

    link.append("path")
        .attr("marker-end", "url(#arrow)")
        .attr("id", d => `edge-${d.source.id}-${d.target.id}`);

    link.append("text")
        .attr("fill", "black")
        .attr("stroke", "none")
        .attr("text-anchor", "middle")
        .attr("dy", -5)
        .append("textPath")
        .attr("href", d => `#edge-${d.source.id}-${d.target.id}`)
        .attr("startOffset", "50%")
        .html(d => d.members.join(','));

    const loop = svg.append("g")
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .attr("fill", "none")
        .selectAll()
        .data(endos)
        .join("g");

    loop.append("path")
        .attr("id", d => `loop-${d.source.id}`);

    loop.append("text")
        .attr("fill", "black")
        .attr("stroke", "none")
        .attr("text-anchor", "middle")
        .attr("dy", -5)
        .append("textPath")
        .attr("href", d => `#loop-${d.source.id}`)
        .attr("startOffset", "50%")
        .html(d => d.members.join(','));

    const node = svg.append("g")
        .attr("stroke-linecap", "round")
        .attr("stroke-linejoin", "round")
        .selectAll()
        .data(nodes)
        .join("g");

    node.append("circle")
        .attr("stroke", "white")
        .attr("stroke-width", 1.5)
        .attr("r", 15)
        .attr('fill', d => '#43779f');

    node.append("text")
        .attr("fill", "white")
        .attr("text-anchor", "middle")
        .attr("alignment-baseline", "central")
        .text(d => d.id);

    node.call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended));

    function ticked() {
        link.selectAll("path")
            .attr("d", d => `M${d.source.x},${d.source.y}L${d.target.x},${d.target.y}`);

        loop.selectAll("path")
            .attr("d", arcd);

        node
            .attr("transform", d => `translate(${d.x},${d.y})`)
    }

    function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
    }

    function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
    }

    function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
    }

    viz.append(svg.node());
    
</script>